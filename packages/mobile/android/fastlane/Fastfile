# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  def check_version(version)
    if (version =~ /^\d+.\d+.\d+$/) != 0
      UI.user_error!("Invalid version #{version}")
    end
  end

  def check_codepush_version(version)
    if (version =~ /^(\d+.\d+.\d+)-codepush.\d+$/) != 0
      UI.user_error!("Invalid codepush version #{version}")
    end

    v = version.split(/^(\d+.\d+.\d+)-codepush.\d+$/)[1]
    if v.length == 0
      UI.user_error!("Unexpected error #{version}")
    end

    return v
  end

  def set_version_code(number)
    path = "../app/build.gradle"
    re = /versionCode\s+(\d+)/

    s = File.read(path)
    s[re, 1] = (number).to_s

    f = File.new(path, "w")
    f.write(s)
    f.close
  end

  def set_version(version)
    check_version(version)

    path = "../app/build.gradle"
    re = /versionName\s+("[\d.]+")/

    s = File.read(path)
    s[re, 1] = "\"#{version}\""

    f = File.new(path, "w")
    f.write(s)
    f.close
  end

  lane :deploy_codepush do |options|
    if options[:version]
      version = options[:version]
    else
      version = prompt(text: "Enter the target version\n(Ex. 1.0.0-codepush.1): ")
    end

    target_version = check_codepush_version(version)

    UI.message("Code push will be deployed for Android #{target_version}. Code Bundle ID: #{version}")

    # Change the code bundle id in the `bugsnag.env.ts`
    sh("cd ../.. && sh ./scripts/set-code-bundle-id.sh #{version}")
    # A problem may have occurred due to the above step. So, check the typing error.
    sh("cd ../.. && yarn typecheck")

    if !ENV["BUGSNAG_API_KEY"] || ENV["BUGSNAG_API_KEY"].length == 0
      UI.user_error!("BUGSNAG_API_KEY is not provided")
    end
    sh("cd ../.. && appcenter codepush release-react -a #{ENV["ANDROID_APPCENTER_APP_NAME"]} -d Production -t #{target_version} --output-dir build")
    # sh("cd ../.. && npx bugsnag-source-maps upload-react-native --api-key #{ENV["BUGSNAG_API_KEY"]} --code-bundle-id #{version} --platform android --source-map build/CodePush/index.android.bundle.map --bundle build/CodePush/index.android.bundle")
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do |options|
    json_key = ENV["PLAYSTORE_JSON_KEY_FILE"]

    if options[:version]
      version = options[:version]
    else
      version = prompt(text: "Enter the version type or specific version\n(Ex. 1.0.0): ")
    end

    UI.message("Version will be #{version}")
    set_version(version)

    version_code = [
      # google_play_track_version_codes[0],
      google_play_track_version_codes(track: "beta", json_key: json_key)[0],
      google_play_track_version_codes(track: "alpha", json_key: json_key)[0],
      google_play_track_version_codes(track: "internal", json_key: json_key)[0],
    ].max + 1
    UI.message("Version code will be #{version_code}")
    set_version_code(version_code)

    gradle(
      task: "bundle",
      build_type: "Release",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_APP_SIGNING"],
        "android.injected.signing.store.password" => ENV["ANDROID_APP_SIGNING_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_APP_SIGNING_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_APP_SIGNING_KEY_PASSWORD"],
      },
    )
    upload_to_play_store(
      track: "beta",
      release_status: "draft",
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_screenshots: true,
      skip_upload_images: true,
      skip_upload_apk: true,
      json_key: json_key
    )
  end
end
