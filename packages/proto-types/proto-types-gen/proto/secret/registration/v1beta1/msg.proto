syntax = "proto3";
package secret.registration.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/scrtlabs/SecretNetwork/x/registration/internal/types";
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = true;

// Msg defines the wasm Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // Register and authenticate new node
  rpc RegisterAuth(RaAuthenticate) returns (RaAuthenticateResponse);
}

message RaAuthenticate {
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "sender";
  bytes sender = 1 [ (gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  bytes certificate = 2 [
    (gogoproto.casttype) = "github.com/scrtlabs/SecretNetwork/x/registration/"
                           "remote_attestation.Certificate",
    (gogoproto.jsontag) = "ra_cert"
  ];
}

message RaAuthenticateResponse {
  string data = 1;
  string events = 2;
}

message MasterKey { bytes bytes = 1; }

message Key { bytes key = 1 [ (gogoproto.jsontag) = "key" ]; }
