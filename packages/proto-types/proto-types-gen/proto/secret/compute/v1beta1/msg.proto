syntax = "proto3";
package secret.compute.v1beta1;

option go_package = "github.com/scrtlabs/SecretNetwork/x/compute/internal/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

// Msg defines the wasm Msg service.
service Msg {
  // StoreCode to submit Wasm code to the system
  rpc StoreCode(MsgStoreCode) returns (MsgStoreCodeResponse);
  //  Instantiate creates a new smart contract instance for the given code id.
  rpc InstantiateContract(MsgInstantiateContract) returns (MsgInstantiateContractResponse);
  // Execute submits the given message data to a smart contract
  rpc ExecuteContract(MsgExecuteContract) returns (MsgExecuteContractResponse);

}

message MsgStoreCode {
  option (gogoproto.goproto_getters) = false;
  // sender is the canonical address of the sender
  bytes sender = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // WASMByteCode can be raw or gzip compressed
  bytes wasm_byte_code = 2 [(gogoproto.customname) = "WASMByteCode"];
  // Source is a valid absolute HTTPS URI to the contract's source code, optional
  string source = 3;
  // Builder is a valid docker image name with tag, optional
  string builder = 4;
}

// MsgStoreCodeResponse returns store result data.
message MsgStoreCodeResponse {
  // CodeID is the reference to the stored WASM code
  uint64 code_id = 1 [ (gogoproto.customname) = "CodeID" ];
}

message MsgInstantiateContract {
  option (gogoproto.goproto_getters) = false;

  // sender is the canonical address of the sender
  bytes sender = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  string callback_code_hash = 2;
  uint64 code_id = 3 [(gogoproto.customname) = "CodeID"];
  string label = 4;
  bytes init_msg = 5;
  repeated cosmos.base.v1beta1.Coin init_funds = 6 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // used internally for encryption, should always be empty in a signed transaction
  bytes callback_sig = 7 [(gogoproto.customname) = "CallbackSig"];
}

// MsgInstantiateContractResponse return instantiation result data
message MsgInstantiateContractResponse {
  // Address is the bech32 address of the new contract instance.
  string address = 1;
  // Data contains base64-encoded bytes to returned from the contract
  bytes data = 2;
}

message MsgExecuteContract {
  option (gogoproto.goproto_getters) = false;

  // sender is the canonical address of the sender
  bytes sender = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  // contract is the canonical address of the contract
  bytes contract = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  bytes msg = 3;
  string callback_code_hash = 4;
  repeated cosmos.base.v1beta1.Coin sent_funds = 5 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // used internally for encryption, should always be empty in a signed transaction
  bytes callback_sig = 6 [(gogoproto.customname) = "CallbackSig"];
}

// MsgExecuteContractResponse returns execution result data.
message MsgExecuteContractResponse {
  // Data contains base64-encoded bytes to returned from the contract
  bytes data = 1;
}
