syntax = "proto3";
package secret.compute.v1beta1;

import "gogoproto/gogo.proto";
import "secret/compute/v1beta1/types.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "cosmos/base/abci/v1beta1/abci.proto";

option go_package = "github.com/scrtlabs/SecretNetwork/x/compute/internal/types";
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = true;

// Query defines the gRPC querier service
service Query {
    // Query contract info by address
    rpc ContractInfo(QueryByContractAddressRequest)
        returns (QueryContractInfoResponse) {
        option (google.api.http).get =
            "/compute/v1beta1/info/{contract_address}";
    }
    // Query code info by id
    rpc ContractsByCodeId(QueryByCodeIdRequest)
        returns (QueryContractsByCodeIdResponse) {
        option (google.api.http).get = "/compute/v1beta1/contracts/{code_id}";
    }
    // Query secret contract
    rpc QuerySecretContract(QuerySecretContractRequest)
        returns (QuerySecretContractResponse) {
        option (google.api.http).get =
            "/compute/v1beta1/query/{contract_address}";
    }
    // Query a specific contract code by id
    rpc Code(QueryByCodeIdRequest) returns (QueryCodeResponse) {
        option (google.api.http).get = "/compute/v1beta1/code/{code_id}";
    }
    // Query all contract codes on-chain
    rpc Codes(google.protobuf.Empty) returns (QueryCodesResponse) {
        option (google.api.http).get = "/compute/v1beta1/codes";
    }
    // Query code hash by contract address
    rpc CodeHashByContractAddress(QueryByContractAddressRequest)
        returns (QueryCodeHashResponse) {
        option (google.api.http).get =
            "/compute/v1beta1/code_hash/by_contract_address/{contract_address}";
    }
    // Query code hash by code id
    rpc CodeHashByCodeId(QueryByCodeIdRequest) returns (QueryCodeHashResponse) {
        option (google.api.http).get = "/compute/v1beta1/code_hash/by_code_id/{code_id}";
    }
    // Query contract label by address
    rpc LabelByAddress(QueryByContractAddressRequest)
        returns (QueryContractLabelResponse) {
        option (google.api.http).get =
            "/compute/v1beta1/label/{contract_address}";
    }
    // Query contract address by label
    rpc AddressByLabel(QueryByLabelRequest)
        returns (QueryContractAddressResponse) {
        option (google.api.http).get =
            "/compute/v1beta1/contract_address/{label}";
    }
}

message QuerySecretContractRequest {
    // address is the bech32 human readable address of the contract
    string contract_address = 1;
    bytes query = 2;
}

message QueryByLabelRequest { string label = 1; }

message QueryByContractAddressRequest {
    // address is the bech32 human readable address of the contract
    string contract_address = 1;
}

message QueryByCodeIdRequest { uint64 code_id = 1; }

message QuerySecretContractResponse { bytes data = 1; }

// QueryContractInfoResponse is the response type for the Query/ContractInfo RPC method
message QueryContractInfoResponse {
    // contract_address is the bech32 human readable address of the contract
    string contract_address = 1;
    ContractInfo ContractInfo = 2
        [ (gogoproto.embed) = true, (gogoproto.jsontag) = "" ];
}

// ContractInfoWithAddress adds the contract address to the ContractInfo representation
message ContractInfoWithAddress {
    // contract_address is the bech32 human readable address of the contract
    string contract_address = 1;
    ContractInfo ContractInfo = 2
        [ (gogoproto.embed) = true, (gogoproto.jsontag) = "" ];
}

message QueryContractsByCodeIdResponse {
    repeated ContractInfoWithAddress contract_infos = 1
        [ (gogoproto.nullable) = false ];
}

message CodeInfoResponse {
    uint64 code_id = 1;
    // creator is the bech32 human readable address of the contract
    string creator = 2;
    string code_hash = 3;
    string source = 4;
    string builder = 5;
}

message QueryCodeResponse {
    CodeInfoResponse code_info = 1
        [ (gogoproto.embed) = true, (gogoproto.jsontag) = "" ];
    bytes wasm = 2;
}

message QueryCodesResponse {
    repeated CodeInfoResponse code_infos = 1 [ (gogoproto.nullable) = false ];
}

message QueryContractAddressResponse {
    // address is the bech32 human readable address of the contract
    string contract_address = 1;
}

message QueryContractLabelResponse { string label = 1; }

message QueryCodeHashResponse { string code_hash = 1; }

// DecryptedAnswer is a struct that represents a decrypted tx-query
message DecryptedAnswer {
    option (gogoproto.equal) = false;

    string type = 1;
    string input = 2;
    string output_data = 3;
    string output_data_as_string = 4;
}

message DecryptedAnswers {
    option (gogoproto.equal) = false;

    repeated DecryptedAnswer answers = 1;
    repeated cosmos.base.abci.v1beta1.StringEvent output_logs = 2
        [ (gogoproto.nullable) = false ];
    string output_error = 3;
    string plaintext_error = 4;
}